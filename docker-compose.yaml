services:
  # Redis service for caching and session management
  redis:
    image: redis:7.2-alpine
    container_name: plug-dev-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-defaultpassword}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-defaultpassword}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - plug-dev-network

  # Main Medusa backend service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: plug-backend-dev
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      - NODE_ENV=production
      - PORT=9000
      - REDIS_URL=redis://:${REDIS_PASSWORD:-defaultpassword}@redis:6379
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - COOKIE_SECRET=${COOKIE_SECRET}
      - STRIPE_SECRET_API_KEY=${STRIPE_SECRET_API_KEY}
      - STRIPE_CONNECTED_ACCOUNTS_WEBHOOK_SECRET=${STRIPE_CONNECTED_ACCOUNTS_WEBHOOK_SECRET}
      - RESEND_API_KEY=${RESEND_API_KEY}
      - RESEND_FROM_EMAIL=${RESEND_FROM_EMAIL}
      - ALGOLIA_APP_ID=${ALGOLIA_APP_ID}
      - ALGOLIA_API_KEY=${ALGOLIA_API_KEY}
      - VITE_TALK_JS_APP_ID=${VITE_TALK_JS_APP_ID}
      - VITE_TALK_JS_SECRET_API_KEY=${VITE_TALK_JS_SECRET_API_KEY}
      - STORE_CORS=${STORE_CORS:-http://localhost:3000}
      - ADMIN_CORS=${ADMIN_CORS:-http://localhost:9000}
      - VENDOR_CORS=${VENDOR_CORS:-http://localhost:5173}
      - AUTH_CORS=${AUTH_CORS:-http://localhost:9000,http://localhost:5173,http://localhost:3000}
      - VENDOR_PANEL_URL=${VENDOR_PANEL_URL:-http://localhost:5173}
      - STOREFRONT_URL=${STOREFRONT_URL:-http://localhost:7001}
      - BACKEND_URL=${BACKEND_URL:-http://localhost:9000}
      - DB_NAME=${DB_NAME}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-defaultpassword}
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 15s
      timeout: 30s
      retries: 5
      start_period: 120s
    volumes:
      - backend_uploads:/server/apps/backend/uploads
      - backend_logs:/server/apps/backend/logs
    networks:
      - plug-dev-network

  # Nginx reverse proxy (optional but recommended for production)
  nginx:
    image: nginx:alpine
    container_name: plug-dev-nginx
    restart: unless-stopped
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - plug-dev-network

volumes:
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  plug-dev-network:
    driver: bridge
